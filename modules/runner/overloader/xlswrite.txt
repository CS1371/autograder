%% xlswrite: output students' excel files 
%
% overload MATLAB's built-in xlswrite to produce comparable cell arrays
%
% xlswrite(FILE, ARRAY) writes ARRAY as a cell array and saves it in a .mat
% file named FILE.
%
% xlswrite(FILE, ARRAY, SHEET) writes ARRAY as a cell array and saves it in
% a .mat file named FILE, disregarding the SHEET input for the purposes of 
% our implementation.
%
% xlswrite(FILE, ARRAY, RANGE) writes ARRAY as a cell array and saves it in
% a .mat file named FILE, disregarding the RANGE input for the purposes of
% our implementation.
%
% xlswrite(FILE, ARRAY, SHEET, RANGE) writes ARRAY as a cell array and 
% saves it in a .mat file named FILE, disregarding the SHEET and RANGE 
% inputs for the purposes of our implementation.
%
% STATUS = xlswrite(___) returns the final status 
% of the operation: TRUE for success, FALSE for failure. 
%
% [STATUS,MESSAGE] = xlswrite(___) returns any warning 
% or error messages generated by the write operation in MESSAGE, a 
% structure. The structure contains two fields: 'message' and 'identifier'.
%
%%% Remarks
%
% This function's ARRAY inputs handles numerical matrices, character
% matrices, string matrices, and cell arrays.
%
% If ARRAY is a cell array and contains data other than a scalar numeric or
% a vector or array of type char, the cell in the output will be empty.
%s
% The maximum size of the output's cell array is constrained by Excel's 
% sheet size limits.
%
% Inf values will be converted to 65535 because that is Excel's max value.
%
% NaN values will be empty cells in the output, following MATLAB's xlswrite
% implementation.
%
% If the file name provided does not have a file extension, xlswrite 
% applies '.mat'. If any file extension other than '.mat' is specified, 
% xlswrite will disregard that specified file extension and apply a '.mat'
% file extension. 
function varargout = xlswrite(file, data, varargin)
    % throw error if varargin non null
    if ~isempty(varargin)
        throw(MException('MATLAB:xlswrite:tooManyInputs', ...
            'Too many input arguments'));
    end
    
    % throw error if more than two outputs requested
    if nargout > 2
        throw(MException('MATLAB:xlswrite:tooManyOutputs', ...
            'Too many output arguments'));
    end
    
    % if data as a whole is valid, good to go!
    % throw error if cell array is invalid
    if isnumeric(data) || islogical(data)
        data = num2cell(data);
    elseif ischar(data)
        data = {data};
    elseif isstring(data)
        data = cellstr(data);
    end
    
    data = cellfun(@validator, data, 'uni', false); %#ok<*NASGU>
    
    % throw error if invalid path; try opening file!
    fid = fopen(file, 'wt');
    if fid == -1
        throw(MException('MATLAB:xlswrite:invalidFilePath', ...
            'Path "%s" is invalid', file));
    else
        fclose(fid);
        delete(file);
    end
    [path, name, ext] = fileparts(file);
    if isempty(path)
        path = pwd;
    end
    ext = lower(ext(2:end));
    if strcmp(ext, 'xls')
        ext = 'xlsx';
    end
    ext = ['.' ext];
    save([path filesep name '.mat'], 'name', 'ext', 'data');
    
    varargout = cell(1, nargout);
end

function data = validator(data)
% data can be:
%
% * string
% * numeric
% * char
% * logical
EXCEL_MAX_VAL = 65536;
e = MException('MATLAB:xlswrite:invalidData', 'Data is invalid');
if isnumeric(data)
    % must be scalar
    if ~isscalar(data)
        e.throw();
    elseif isnan(data)
        data = [];
    elseif isinf(data)
        data = sign(data) * EXCEL_MAX_VAL;
    end
elseif islogical(data)
    tmp = [0 1];
    data = tmp(data + 1);
elseif isstring(data)
    data = char(data);
elseif ~ischar(data)
    e.throw();
end

end