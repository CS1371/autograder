%% xlswrite: output students' excel files 
%
% overload MATLAB's built-in xlswrite to produce comparable cell arrays
%
% xlswrite(FILE, ARRAY) writes ARRAY as a cell array and saves it in a .mat
% file named FILE.
%
% xlswrite(FILE, ARRAY, SHEET) writes ARRAY as a cell array and saves it in
% a .mat file named FILE, disregarding the SHEET input for the purposes of 
% our implementation.
%
% xlswrite(FILE, ARRAY, RANGE) writes ARRAY as a cell array and saves it in
% a .mat file named FILE, disregarding the RANGE input for the purposes of
% our implementation.
%
% xlswrite(FILE, ARRAY, SHEET, RANGE) writes ARRAY as a cell array and 
% saves it in a .mat file named FILE, disregarding the RANGE input for the 
% purposes of our implementation.
%
% STATUS = xlswrite(FILE,ARRAY,SHEET,RANGE) returns the final status 
% of the operation: TRUE for success, FALSE for failure. 
% Inputs SHEET and RANGE are optional.
%
% [STATUS,MESSAGE] = xlswrite(FILE,ARRAY,SHEET,RANGE) returns any warning 
% or error messages generated by the write operation in MESSAGE, a 
% structure. The structure contains two fields: 'message' and 'identifier'.
% Inputs SHEET and RANGE are optional.
%
%%% Remarks
%
% This function's ARRAY inputs handles numerical matrices, character
% matrices, string matrices, and cell arrays.
%
% If ARRAY is a cell array and contains data other than a scalar numeric or
% a vector or array of type char, the cell in the output will be empty.
%
% The maximum size of the output's cell array is constrained by Excel's 
% sheet size limits.
%
% Inf values will be converted to 65535 because that is Excel's max value.
%
% NaN values will be empty cells in the output, following MATLAB's xlswrite
% implementation.
%
%%% Exceptions
%
% State any exceptions your code throws, and the conditions for those exceptions.
%
% functionName throws exception APPNAME:MODULENAME:FUNCTIONNAME:ERROR if condition
% is met.
%
%%% Unit Tests
%
% This is a place for you to provide tests for your function. Unit Tests
% need to be exhaustive. What does this mean? It means that it needs to
% completely enumerate this function's behavior. How does it behave if an input
% is empty? CaSe SeNsItIvItY? Invalid inputs? Basically, a test case for
% testing the normal usage, and a test case for each edge case.
%
% Test Cases always start with a TAB; this tell's the publisher to mark it as
% MATLAB code. The basic template is:
%
%   S = 'Set Up Your Inputs First';
%   T = 'It's ok to make your variable names one letter.'
%   [O, M] = functionName(S, T); % Run your function!
%
%   The output appears on a new line, and describing it looks like this:
%   O -> MATLAB code that produces output
%
%   S = ["Hello"; "WOrld"];
%   P = 'O';
%   M = strFound(S, P);
%
%   M -> [false; true];
%
%   S = 'HelloWorld';
%   P = "w";
%   M = strFound(S, P);
%
%   M -> false;
%
%   S = {'hello', [1 2 3]};
%   P = 'wassup';
%   M = strFound(S, P);
%
%   Exception Raised: TEXTS is not uniform
%
%   S = {'hello'};
%   P = {[1 2 3]};
%   M = strFound(S, P);
%
%   Exception Raised: PATTERNS is not uniform