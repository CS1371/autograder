%% xlswrite: output students' excel files 
%
% overload MATLAB's built-in xlswrite to produce comparable cell arrays
%
% xlswrite(FILE, ARRAY) writes ARRAY as a cell array and saves it in a .mat
% file named FILE.
%
% xlswrite(FILE, ARRAY, SHEET) writes ARRAY as a cell array and saves it in
% a .mat file named FILE, disregarding the SHEET input for the purposes of 
% our implementation.
%
% xlswrite(FILE, ARRAY, RANGE) writes ARRAY as a cell array and saves it in
% a .mat file named FILE, disregarding the RANGE input for the purposes of
% our implementation.
%
% xlswrite(FILE, ARRAY, SHEET, RANGE) writes ARRAY as a cell array and 
% saves it in a .mat file named FILE, disregarding the SHEET and RANGE 
% inputs for the purposes of our implementation.
%
% STATUS = xlswrite(___) returns the final status 
% of the operation: TRUE for success, FALSE for failure. 
% Inputs SHEET and RANGE are optional.
%
% [STATUS,MESSAGE] = xlswrite(___) returns any warning 
% or error messages generated by the write operation in MESSAGE, a 
% structure. The structure contains two fields: 'message' and 'identifier'.
% Inputs SHEET and RANGE are optional.
%
%%% Remarks
%
% This function's ARRAY inputs handles numerical matrices, character
% matrices, string matrices, and cell arrays.
%
% If ARRAY is a cell array and contains data other than a scalar numeric or
% a vector or array of type char, the cell in the output will be empty.
%
% The maximum size of the output's cell array is constrained by Excel's 
% sheet size limits.
%
% Inf values will be converted to 65535 because that is Excel's max value.
%
% NaN values will be empty cells in the output, following MATLAB's xlswrite
% implementation.
%
% If the file name provided does not have a file extension, xlswrite 
% applies '.mat'. If any file extension other than '.mat' is specified, 
% xlswrite will disregard that specified file extension and apply a '.mat'
% file extension. 
%
%%% Exceptions
%
% xlswrite should not throw an exception, as long as two inputs are given.
%
%%% Unit Tests
%
%   F = 'example.mat;
%   A = {{[3 4 1 2]}; {'hello'};
%   [S, M] = xlswrite(F, A);
%
%   S -> true;
%   M -> '';
%
%   F = 'example.mat';
%   A = [];
%   xlswrite(F, A);
%
%   Exception Raised: not enough input arguments
%
%   F = [];
%   A = {{[3 4 1 2]}; {'hello'};
%   xlswrite(F, A);
%
%   Exception Raised: not enough input arguments
%
%   F = [];
%   A = [];
%   xlswrite(F, A);
%
%   Exception Raised: not enough input arguments