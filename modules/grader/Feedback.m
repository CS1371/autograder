%% Feedback: Represents Feedback 
%
% This class represents feedback for a specific TestCase.
%
%%% Fields
%
% * testCase: The TestCase for this feedback
%
% * hasPassed: True if the student passed this test completely
%
% * path: The fully qualified path for this student's directory
%
% * outputs: A structure where the field name is the name of the output, 
%            and the field value is the value of the output
%
% * files: A File array that represents all the files produced by the
%          student
%
% * plots: A Plot array that represents all the plots generated by the
%          student
%
% * points: The number of points earned for this test case
%
% * exception: The MException raised by the student's code.
%
%%% Methods
%
% * Feedback
%
% * generateFeedback
%
%%% Constants
%
% * CORRECT_MARK: The HTML markup for a checkmark
%
% * INCORRECT_MARK: The HTML markup for an x (incorrect)
%
%%% Remarks
%
% The Feedback class represents a complete feedback for this specific Test 
% Case. It does not make sense to have a Feedback without a corresponding 
% Student, especially considering that the student's code is what is used 
% to create the initial run.
%
% These other fields are only filled when a Student's gradeProblem method 
% has successfully completed!
%
% Additionally, this class also has many constants that aid when generating 
% feedback. Of note are |CORRECT_MARK| and |INCORRECT_MARK|, which are the 
% marks we use to show passing or failing, respectively.
classdef Feedback < handle
    properties (Constant)
        CORRECT_MARK = '<i class="fas fa-check"></i>';
        INCORRECT_MARK = '<i class="fas fa-times"></i>';
    end
    properties (Access = public)
        testCase;
        hasPassed;
        path;
        outputs;
        files;
        plots;
        exception;
        points;
        isRecursive = false;
    end
    methods
        %% Constructor
        %
        % The constructor creates a new Feedback from a TestCase and path. 
        %
        % this = Feedback(T,P) will return a Feedback with the
        % T and P field assigned. The rest of the fields will be
        % assigned by the gradeProblem function
        %
        %%% Remarks
        %
        % The constructor creates a new Feedback for the given TestCase T.
        % To actually _generate_ feedback, the Feedback class will need to 
        % be initialized correctly.
        %
        %%% Unit Tests
        %
        %   T = testCase; % Given a valid TestCase:
        %   F = Feedback(T);
        %
        %   F.testCase -> T;
        %
        function [this] = Feedback(testCase, path)
            if nargin == 0
                return;
            end
            this.testCase = testCase;
            this.path = path;
        end
    end
    methods (Access = public)
        %% generateFeedback: Generates HTML feedback 
        %
        % The function generates complete HTML feedback for the specific
        % feedback 
        %
        % H = generateFeedback() generates the complete html
        % feedback for this based on the information stored in the
        % properties
        %
        %%% Remarks
        %
        % generateFeedback is used to create the HTML feedback for this single test case.
        % Since this class possesses all information about the test case and the student's
        % response, this method can always generate compleete feedback about a run.
        %
        % generateFeedback is guaranteed to never error so long as it has been correctly 
        % initialized.
        %
        %%% Exceptions
        %
        % An AUTOGRADER:FEEDBACK:GENERATEFEEDBACK:INVALIDFEEDBACK exception
        % will be thrown if no Feedback is given or the given Feedback has
        % insufficient or missing data
        %
        %%% Unit Tests
        %
        %   F = Feedback(T); % T is valid Test Case
        %   ... % Assume F has been correctly initialized
        %   H = F.generateFeedback();
        %
        %   The correct HTML feedback is returned.
        % a correct and complete html feedback will be output based on the
        % properties of the feedback file
        %
        % Given an invalid Feedback: 
        % an AUTOGRADER:FEEDBACK:GENERATEFEEDBACK:INVALIDFEEDBACK exception
        % will be thrown
        %
        %
        function html = generateFeedback(this)
            %Check if testCase was passed and output empty div
            if this.hasPassed
                html = '<div class = "container feedback">';
            elseif ~isempty(this.exception)
                html = ['<div class = "container feedback"><p class = "exception">' 
                        this.exception.identifier ":" this.exception.message '</p>'];
            else
                html = '<div class = "container feedback">';
                %Get solution outputs for testCase
                solnOutputs = this.testCase.outputs;
                solnFiles = this.testCase.files;
                solnPlots = this.testCase.plots;
                
                %Check whether regular outputs should have been produced
                %by student
                if ~isempty(solnOutputs)
                    fn = fieldnames(this.outputs);
                    fnSoln = fieldnames(solnOutputs);
                    if length(fn) ~= length(fnSoln)
                        html = [html '<p>Number of outputs don''t match.</p>'];
                    else
                        for i = 1:length(fnSoln)
                            html = [html generateFeedback(this.outputs.(fnSoln{i}), solnOutputs.(fnSoln{i}))];
                        end
                    end
                end
                
                %Check whether files should have been produced by student
                if ~isempty(solnFiles)
                    if length(solnFiles) ~= length(this.files)
                        html = [html '<p>Number of files don''t match.</p>'];
                    else
                        for i = 1:length(this.files)
                            html = [html matchFiles(this.files(i), solnFiles)];
                        end
                    end
                end
                
                %Check whether plots should have been produced by student
                if ~isempty(solnPlots)
                    if length(solnPlots) ~= length(this.plots)
                        html = [html '<p>Number of plots don''t match.</p>'];
                    else
                        for i = 1:length(this.plots)
                            html = [html matchPlots(this.plots(i), solnPlots)];
                        end
                    end
                end
            end
            html = sprintf('%s<p>Points earned for this test case: %0.2f/%0.2f</p></div>',...
                            html, this.points, this.testCase.points);
        end
    end
    methods (Access = private)
        %% matchFiles
        % Mathces student file to corresponding solution file and 
        % calls generateFeedback
        % If pair not found, 'Misnamed File' html output
        function html = matchFiles(student, solutions)
            found = false;
            for i = 1:length(solutions)
                if strcmp(student.name, solutions(i).name)
                    found = true;
                    ind = i;
                end
            end
            if found
                html = File.generateFeedback(student, solutions(ind));
            else
                html = '<p>Incorrect file name.</p>';
            end
        end
        
        %% matchPlots
        % Matches student plot to corresponding solution plot and 
        % calls generateFeedback
        function html = matchPlots(student, solutions)
            found = false;
            for i = 1:length(solutions)
                if strcmp(student.Title, solutions(i).Title)
                    found = true;
                    ind = i;
                end
            end
            if found
                html = Plot.generateFeedback(student, solutions(ind));
            else
                html = '<p>Invalid plot.</p>';
            end
        end
    end
end